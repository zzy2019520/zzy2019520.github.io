{"meta":{"title":"张占阳的博客","subtitle":"","description":"","author":"张占阳","url":"http://zzy521.com","root":"/"},"pages":[{"title":"关于我","date":"2020-12-20T12:26:06.000Z","updated":"2020-12-23T07:06:34.312Z","comments":false,"path":"about/index.html","permalink":"http://zzy521.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-12-20T12:51:11.000Z","updated":"2020-12-20T12:52:44.744Z","comments":false,"path":"tags/index.html","permalink":"http://zzy521.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-12-20T12:26:06.000Z","updated":"2020-12-20T12:47:16.402Z","comments":false,"path":"categories/index.html","permalink":"http://zzy521.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Python处理Excel文件","slug":"Python处理Excel文件","date":"2021-02-25T03:42:02.000Z","updated":"2021-02-25T07:43:32.321Z","comments":true,"path":"posts/6c0fc8c8.html","link":"","permalink":"http://zzy521.com/posts/6c0fc8c8.html","excerpt":"","text":"做了一个从Excel中筛选需要的列和行；并根据内容不同放到不同的Excel中的程序 导入需要的包123456789import sysimport xlrdimport xlwtfrom datetime import datetimefrom xlrd import xldate_as_tupleimport tkinterimport osfrom tkinter import filedialogfrom tkinter import messagebox 选取Excel文件并获取文件名和文件路径123456from tkinter import filedialogtkinter.Tk().withdraw() # 使用tk选择文件时会出现一个框框，不影响使用但会看着很难受，所以将Tkinter.Tk()实例隐藏Filepath = filedialog.askopenfilename(title=u&#x27;选择文件&#x27;)#获取文件路径并将选择框标题设置为选择文件Filename = os.path.basename(Filepath)#根据文件路径获取文件名，后边我生成新的文件需要根据选择的文件来命名if Filepath == &#x27;&#x27;:#如果弹出的文件选择框未选择就关闭会导致文件路径为空，下边的代码执行会出错，所以路径为空直接结束程序 sys.exit() 读取Excel文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&#x27;&#x27;&#x27;读取工作表&#x27;&#x27;&#x27;data = xlrd.open_workbook(Filepath)#根据上边的路径读取Excel文件table = data.sheets()[0]#用索引方式获取第一个sheet&#x27;&#x27;&#x27;总行数&#x27;&#x27;&#x27;nrows = table.nrows&#x27;&#x27;&#x27;总列数&#x27;&#x27;&#x27;ncols = table.ncols&#x27;&#x27;&#x27;获取第二行的列名称&#x27;&#x27;&#x27;columnName = table.row_values(1)#excel中第二行为列名，用列表记录&#x27;&#x27;&#x27;获取需要的列的字典&#x27;&#x27;&#x27;saveColumn = [&#x27;任务号&#x27;, &#x27;物料编码&#x27;, &#x27;零件图号&#x27;, &#x27;数量&#x27;, &#x27;材质&#x27;, &#x27;尺寸&#x27;, &#x27;工序&#x27;, &#x27;完工日期&#x27;, &#x27;备料日期&#x27;, &#x27;成型日期&#x27;, &#x27;仓库&#x27;, &#x27;定额&#x27;, &#x27;工段&#x27;, &#x27;组件&#x27;, &#x27;外协&#x27;, &#x27;批次&#x27;]#需要保存的列的名称columnNameDictionary = &#123;&#125;#声明一个字典来存储需要的列在excel中对应的列号for i in range(ncols): if columnName[i] in saveColumn:#如果第二列中的列名在需要保存的列的列表中；则将列名和列号存到字典中 columnNameDictionary[columnName[i]] = i&#x27;&#x27;&#x27;获取需要的数据列数据，去掉不需要的列数据&#x27;&#x27;&#x27;dataContent = []for key, value in columnNameDictionary.items():#根据列名字典中列名对应的数据列去获取数据内容 dataContent.append(table.col_values(value, start_rowx=1, end_rowx=nrows))&#x27;&#x27;&#x27;去掉不需要的行数据,同时将列表存储数据的方式由列转为行&#x27;&#x27;&#x27;ncols = len(dataContent) # 列数量----更新行列值nrows = len(dataContent[0]) # 行数量&#x27;&#x27;&#x27;需要将材质列等于——的值整行删除&#x27;&#x27;&#x27;material = 0 # 材质的列号for i in range(nrows): # 找到材质的列号 if dataContent[i][0] == &#x27;材质&#x27;: material = i breakfinalDataContent = []#用来存储最终需要的行列数据，按行存储for i in range(nrows):#i为行数 temp = []#暂存数据的列表 if dataContent[material][i] != &#x27;——&#x27;:#如果材质不等于——则将第i行数据读出 for j in range(ncols): temp.append(dataContent[j][i]) finalDataContent.append(temp)#将读到的数据保存 temp = []&#x27;&#x27;&#x27;更新列名字典和行列数&#x27;&#x27;&#x27;ncols = len(finalDataContent[0]) # 列数量nrows = len(finalDataContent) # 行数量columnNameDictionary.clear()for i in range(ncols): columnNameDictionary[finalDataContent[0][i]] = i 修改Excel内需要修改的数据1234567891011121314&#x27;&#x27;&#x27;修改数据内容;按外协厂家进行分组-----为了减少循环次数放到了一块&#x27;&#x27;&#x27;outsourcSet = set() # 创建外协集合for i in range(nrows): if i &gt; 0: # 第一行为列名，从第二行开始遍历 “零件图号”列将所有字母改为小写、“.”改为“-”、“艺”改为“y” finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]] = finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]].lower() finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]] = finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]].replace(&#x27;.&#x27;, &#x27;-&#x27;) finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]] = finalDataContent[i][columnNameDictionary[&#x27;零件图号&#x27;]].replace(&#x27;艺&#x27;, &#x27;y&#x27;) finalDataContent[i][columnNameDictionary[&#x27;数量&#x27;]] = int(finalDataContent[i][columnNameDictionary[&#x27;数量&#x27;]]) finalDataContent[i][columnNameDictionary[&#x27;完工日期&#x27;]] = datetime(*xldate_as_tuple(finalDataContent[i][columnNameDictionary[&#x27;完工日期&#x27;]], 0)).strftime(&#x27;%Y-%m-%d&#x27;) finalDataContent[i][columnNameDictionary[&#x27;备料日期&#x27;]] = datetime(*xldate_as_tuple(finalDataContent[i][columnNameDictionary[&#x27;备料日期&#x27;]], 0)).strftime(&#x27;%Y-%m-%d&#x27;) finalDataContent[i][columnNameDictionary[&#x27;成型日期&#x27;]] = datetime(*xldate_as_tuple(finalDataContent[i][columnNameDictionary[&#x27;成型日期&#x27;]], 0)).strftime(&#x27;%Y-%m-%d&#x27;) outsourcSet.add(finalDataContent[i][columnNameDictionary[&#x27;外协&#x27;]])outsourc = list(outsourcSet)#得到的分为不同文件的厂家名 str.lower()是将字符串的字母全转为小写 str.replace(&#39;艺&#39;, &#39;y&#39;)是将字符串的“艺”都转为“y” finalDataContent[i][columnNameDictionary[&#39;完工日期&#39;]] = datetime(*xldate_as_tuple(finalDataContent[i][columnNameDictionary[&#39;完工日期&#39;]], 0)).strftime(&#39;%Y-%m-%d&#39;) finalDataContent[i][columnNameDictionary[&#39;完工日期&#39;]]的 值在读取过后被转为了数值，应该展示为日期，所以使用 datetime(*xldate_as_tuple(finalDataContent[i][columnNameDictionary[&#39;完工日期&#39;]], 0)).strftime(&#39;%Y-%m-%d&#39;) 来转为日期型并重新赋值给它 将data由读出来的数值转为日期的方法为datetime(*xldate_as_tuple(data, 0)).strftime(&#39;%Y-%m-%d&#39;) 将数据存储为Excel文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# 设置样式# VERT_TOP = 0x00 上端对齐# VERT_CENTER = 0x01 居中对齐（垂直方向上）# VERT_BOTTOM = 0x02 低端对齐# HORZ_LEFT = 0x01 左端对齐# HORZ_CENTER = 0x02 居中对齐（水平方向上）# HORZ_RIGHT = 0x03 右端对齐style = xlwt.XFStyle()al = xlwt.Alignment()al.horz = 0x02 # 设置水平居中al.vert = 0x01 # 设置垂直居中style.alignment = alfor i in range(len(outsourc)): name = Filepath.replace(&#x27;★模板★&#x27;, &#x27;【&#x27; + outsourc[i] + &#x27;】&#x27;) # 创建excel文件 filename = xlwt.Workbook() # 给工作表命名 sheet = filename.add_sheet(data.sheet_names()[0]) a = b = 0 for j in range(nrows): style2 = xlwt.easyxf(&#x27;font:height 360;&#x27;) # 18pt,类型小初的字号 row = sheet.row(j) row.set_style(style2) if j == 0: for k in range(ncols): sheet.write(a, b, finalDataContent[j][k], style) b += 1 b = 0 a += 1 else: if finalDataContent[j][columnNameDictionary[&#x27;外协&#x27;]] == outsourc[i]: finalDataContent[j][columnNameDictionary[&#x27;外协&#x27;]] = &#x27;外协&#x27; + finalDataContent[j][columnNameDictionary[&#x27;外协&#x27;]] for k in range(ncols): sheet.write(a, b, finalDataContent[j][k], style) b += 1 b = 0 a += 1&#x27;&#x27;&#x27;设置每一列的宽度&#x27;&#x27;&#x27; sheet.col(0).width = 256 * 14 sheet.col(1).width = 256 * 14 sheet.col(2).width = 256 * 20 sheet.col(3).width = 256 * 5 sheet.col(4).width = 256 * 10 sheet.col(5).width = 256 * 20 sheet.col(6).width = 256 * 20 sheet.col(7).width = 256 * 14 sheet.col(8).width = 256 * 14 sheet.col(9).width = 256 * 14 sheet.col(10).width = 256 * 10 sheet.col(11).width = 256 * 10 sheet.col(12).width = 256 * 14 sheet.col(13).width = 256 * 14 sheet.col(14).width = 256 * 14 sheet.col(15).width = 256 * 20 filename.save(name) 设置单元格数据居中的方式1234567891011121314# 设置样式# VERT_TOP = 0x00 上端对齐# VERT_CENTER = 0x01 居中对齐（垂直方向上）# VERT_BOTTOM = 0x02 低端对齐# HORZ_LEFT = 0x01 左端对齐# HORZ_CENTER = 0x02 居中对齐（水平方向上）# HORZ_RIGHT = 0x03 右端对齐style = xlwt.XFStyle()al = xlwt.Alignment()al.horz = 0x02 # 设置水平居中al.vert = 0x01 # 设置垂直居中style.alignment = alsheet.write(a, b, finalDataContent[j][k], style)#在第a行第b列填入finalDataContent[j][k]的数据，格式为style 设置单元格高度123style2 = xlwt.easyxf(&#x27;font:height 360;&#x27;) # 18pt,类型小初的字号 row = sheet.row(j)#在写第j行的时候设置它的高度 row.set_style(style2) 设置单元格高度1sheet.col(0).width = 256 * 14#设置单元格第1列的宽度；256为一个字符的宽度 将数据存储为txt文件12345678910111213for i in range(len(outsourc)): name = Filepath.replace(&#x27;★模板★.xls&#x27;, &#x27;【&#x27; + outsourc[i] + &#x27;】.txt&#x27;) txtData = open(name, &#x27;w&#x27;)#以读方式打开，如果有数据会被清空 count = 0 # 记录行号 for j in range(nrows): if j &gt; 0: if finalDataContent[j][columnNameDictionary[&#x27;外协&#x27;]] == &#x27;外协&#x27; + outsourc[i]: if count != 0:#如果不是第一行则先加换行再输出；需求最后没有空行，最后不能换行，所以换行在写每一行之前 print(&#x27;&#x27;, file=txtData)#print打印会默认换行，所以直接打印空字符 count += 1 for k in range(ncols): print(finalDataContent[j][k], end=&#x27;\\t&#x27;, file=txtData)#写入每个数据后用制表符分隔 txtData.close()#关闭文件对象 完成后弹出提示框1messagebox.showinfo(&quot;提示&quot;, &quot;文件分解完成&quot;)","categories":[{"name":"文章分类","slug":"文章分类","permalink":"http://zzy521.com/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"文章标签","slug":"文章标签","permalink":"http://zzy521.com/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"服务器添加EOS的workspace功能","slug":"服务器添加EOS的workspace功能","date":"2021-02-20T01:13:00.000Z","updated":"2021-02-20T01:32:31.356Z","comments":true,"path":"posts/24cd4f39.html","link":"","permalink":"http://zzy521.com/posts/24cd4f39.html","excerpt":"","text":"1.复制文件到服务器将Windows下边的workspace文件夹拷贝到服务器tomcat目录下的webapps文件夹中 ，workspace文件夹为EOS安装路径下的\\apache-tomcat-7.0.54\\webapps\\workspace 2.修改配置文件这个时候就可以访问登录界面但实际无法登录，需要修改xml文件中的IP地址的端口号 修改uddi-address.xml文件中的内容，文件地址为服务器tomcat安装目录下的apache-tomcat-7.0.54/webapps/workspace/WEB-INF/classes/uddi-address.xml 12345678910111213&lt;uddi__address id=&quot;default&quot;&gt; &lt;name&gt;localserver&lt;/name&gt; &lt;logicName&gt;default&lt;/logicName&gt; &lt;type&gt;remote&lt;/type&gt; &lt;description&gt;uddi-config.xml at &quot; Work Space&quot;&lt;/description&gt; &lt;uddiHost&gt;10.8.32.159&lt;/uddiHost&gt; &lt;uddiPort&gt;8090&lt;/uddiPort&gt; &lt;uddiWebContext&gt;default&lt;/uddiWebContext&gt; &lt;uddiUserID&gt;bps&lt;/uddiUserID&gt; &lt;uddiPassword&gt;000000&lt;/uddiPassword&gt; &lt;uddiAdminPort&gt;6200&lt;/uddiAdminPort&gt; &lt;/uddi__address&gt;&lt;/uddi__address__list&gt; 将uddiHost修改为服务器ip地址，将uddiPort修改为服务器tomcat的端口号","categories":[{"name":"服务器","slug":"服务器","permalink":"http://zzy521.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://zzy521.com/tags/Linux/"},{"name":"EOS","slug":"EOS","permalink":"http://zzy521.com/tags/EOS/"}]},{"title":"将Java程序打包为exe文件并和jre一起打包为安装包","slug":"将Java程序打包为exe文件并和jre一起打包为安装包","date":"2021-02-19T03:36:00.000Z","updated":"2021-02-19T07:16:46.459Z","comments":true,"path":"posts/eeae6a0e.html","link":"","permalink":"http://zzy521.com/posts/eeae6a0e.html","excerpt":"","text":"1.将Java程序导出的jar文件打包为exe文件1.1打开安装好的exe4j软件，首先看到的是一个欢迎界面，直接【next】就可以了 1.2在第二步中我们选择【JAR in EXE mode】，然后【next】 1.3.第三步中需要输入程序的缩写名字和指明输出目录，就是程序的保存目录，按照自己的情况设置就行，没啥特别要求，然后【next】 1.4.需要指定程序的名字，设置程序的图标，注意，程序图标要用ico格式的图片 1.5.然后我们在左边的菜单栏中选择【32 bit or 64 bit】，勾上【Generate 64 bit executeable】，不勾选为32位，勾选为64位 1.6.添加我们的jar包，点击右边绿色的 “+”号，然后选择【Archive】，打开浏览目录，找到我们的jar包，然后选择【打开】，【ok】 1.7.然后选择主类，在Main class后面，选择【浏览】，找到主类，添加上主类，然后【next】 1.8.设置JRE的最小最高版本，我们根据自己的情况设置，小版本设置成1.5，大版本设置成1.8，就行 1.9.然后点击【Advanced Options】，选择【Search sequence】，将我们的JRE添加到软件中，这样的话，我们的代码可以在别的没有安装Java环境的电脑上运行；点击右边的添加，选择【Directory】，然后选择【浏览】，找到我们的JRE，然后添加（添加之后把前面的删掉然后加一个点，这里我写的是.\\jre1.8.0_73，使用相对路径，之后把生成的程序和jre的文件夹拷贝到同一个文件夹下） 1.10.然后点击左侧的【Preferred VM】，选择【Client hotspot VM】，然后【next】 1.11.其余的步骤直接默认就行了，这样生成的exe文件就能正常运行了！ 2.将jre环境和exe文件一起打包为程序安装包需要安装Inno Setup 菜单栏→新建，打开脚本向导 直接下一步 填写应用程序名称和应用程序版本，其他两个可以选填。 这一步可以默认，应用程序所在的文件夹默认为上一步填的应用程序名称 主执行文件选择用exe4j打包好的那个exe文件，然后点击添加文件夹选中jre文件夹，下一步 直接下一步 接着下一步 继续下一步 还是下一步 选择安装程序的保存位置、安装程序文件名、安装程序的图标。安装密码为可选项 继续下一步 点击完成 在生成的脚本中找到**[Files],然后找到刚刚添加的文件夹路径，在文件加路径后的&#123;app&#125;后边加上\\jre，jre就是程序安装后在安装路径下生成的文件夹名称，这里文件夹的名称与上边1.9中填写的路径要保持一致**，如果上边是跟我的文件夹名一样的，那这里也要写为.\\jre1.8.0_73。 然后在菜单栏点击构建→编译即可。","categories":[{"name":"开发工具","slug":"开发工具","permalink":"http://zzy521.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"exe","slug":"exe","permalink":"http://zzy521.com/tags/exe/"},{"name":"Java","slug":"Java","permalink":"http://zzy521.com/tags/Java/"}]},{"title":"EOS中Restful服务的开发与调用","slug":"EOS实现restful","date":"2021-01-20T09:21:05.000Z","updated":"2021-02-20T02:24:44.139Z","comments":true,"path":"posts/5a3d390e.html","link":"","permalink":"http://zzy521.com/posts/5a3d390e.html","excerpt":"","text":"开发Restful服务创建服务实现类创建一个class，添加下列注解和代码，配置接口访问的入口，需要注意的是Path中的路径必须是与web.xml中resteasyservlet配置的相同，否则将无法访问到接口，此处我们配置在/rest/services下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990package com.xcmg.service;import java.util.*;import javax.sql.DataSource;import javax.ws.rs.GET;import javax.ws.rs.POST;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import com.alibaba.fastjson.JSON;import com.eos.common.connection.DataSourceHelper;import com.eos.engine.component.ILogicComponent;import com.eos.foundation.data.DataObjectUtil;import com.eos.workflow.api.BPSServiceClientFactory;import com.primeton.components.rest.annotation.JSONParam;import com.primeton.ext.engine.component.LogicComponentFactory;import com.xcmg.getRsInfo;import commonj.sdo.DataObject;@Path(&quot;/rest/services/RoleService&quot;)@Produces(&#123;&quot;application/json&quot;&#125;)public class ProcessStartService &#123; @POST @Path(&quot;/addProcess&quot;) //新增数据 public String addRole(@JSONParam(&quot;role&quot;)DataObject[] role)throws Throwable&#123; //获取后台返回值 Map ms= new HashMap(); //调用数据模型 role = DataObjectUtil.convertDataObjects(role,&quot;com.primeton.eos.Advice.Advice&quot;,false); System.err.println(role.length); for (int i = 0; i &lt; role.length; i++) &#123; Object[] inParameters = &#123; role[i].get(&quot;proposer&quot;), role[i].get(&quot;department&quot;), role[i].get(&quot;phone&quot;), role[i].get(&quot;category&quot;), role[i].get(&quot;carrydepartment&quot;), role[i].get(&quot;proposal&quot;), role[i].get(&quot;actuality&quot;), role[i].get(&quot;improvement&quot;) &#125;; //打印数据 Object[] params = new Object[1]; params[0] = role; Object[] result = null; //设置登录用户 String userid= (String)role[i].get(&quot;state&quot;); BPSServiceClientFactory.getLoginManager().setCurrentUser(userid, &quot;sysadmin&quot;); //构件名称 ILogicComponent logicComponent = LogicComponentFactory.create(&quot;com.primeton.eos.phoneProcess&quot;); //逻辑流名称 result = logicComponent.invoke(&quot;StartProcess&quot;, inParameters); String count = (String)result[0]; Long id = (Long)result[1]; System.err.println(&quot;-----------------------》》&quot;+count); if(count.equals(&quot;1&quot;))&#123; ms.put(&quot;errorCode&quot;,&quot;00100&quot;); ms.put(&quot;errorMsg&quot;, &quot;新增数据成功&quot;); ms.put(&quot;value&quot;,id); &#125;else&#123; //更新数据 ms.put(&quot;errorCode&quot;,&quot;00200&quot;); ms.put(&quot;errorMsg&quot;, &quot;新增数据失败&quot;); ms.put(&quot;value&quot;,&quot;&quot;); &#125; &#125; return JSON.toJSONString(ms); &#125; @GET @Path(&quot;/getProcess/&#123;productCode&#125;&quot;) //查询数据是否存在 public String selectEngineNumberInfoCount(@PathParam(&quot;productCode&quot;)String productCode) throws Throwable&#123; Map ms= new HashMap(); DataSource db = DataSourceHelper.getDataSource(&quot;default&quot;); //查询用户 String vininfo = &quot;SELECT a.PROCESSINSTID,a.PROPOSER,b.NAME DEPARTMENT,a.PHONE,c.NAME CATEGORY,d.NAME CARRYDEPARTMENT,a.PROPOSAL,a.ACTUALITY,a.IMPROVEMENT,a.SUBMITTIME,a.OPINION1,a.CHECKTIME,a.OPINION2,a.RECHECKTIME,a.STATE FROM ((ADVICE a LEFT JOIN DEPARTMENT b ON a.DEPARTMENT=b.DID)LEFT JOIN CATEGORY c ON a.CATEGORY=c.ID)LEFT JOIN CARRYDEPARTMENT d ON a.CARRYDEPARTMENT=d.ID WHERE PHONE = &#x27;&quot;+productCode+&quot;&#x27; ORDER BY PROCESSINSTID DESC&quot;; //获取密码 List list = getRsInfo.getRsListbySql(vininfo, db.getConnection()); return JSON.toJSONString(list); &#125;&#125; 创建配置文件在编辑的java同目录下创建文件restconfig.properties并录入以下内容（等号后是对应的类全名） 1resteasy.resources&#x3D;com.xcmg.service.ProcessStartService 编辑web.xml文件编辑web.xml文件，在rest.config.locations下的param-value标签下新增restconfig.properties对应路径，需要增加英文逗号与已有内容分开，保存编辑后需要右键web.xml文件进行部署。 注意事项：1.修改了web.xml要手动部署web.xml2.web.xml中的servlet-mapping下的url-pattern要和配置访问的地址对应3.在rest.config.locations下的param-value标签下新增restconfig.properties对应路径","categories":[{"name":"开发工具","slug":"开发工具","permalink":"http://zzy521.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"EOS","slug":"EOS","permalink":"http://zzy521.com/tags/EOS/"},{"name":"Rest接口","slug":"Rest接口","permalink":"http://zzy521.com/tags/Rest%E6%8E%A5%E5%8F%A3/"}]},{"title":"Markdown生成带侧边目录的HTML","slug":"Markdown生成带侧边目录的HTML","date":"2021-01-03T02:24:25.000Z","updated":"2021-01-03T02:25:44.315Z","comments":true,"path":"posts/7067bb35.html","link":"","permalink":"http://zzy521.com/posts/7067bb35.html","excerpt":"","text":"在使用Markdown文件生成说明文档的时候一般需要家侧边目录，但是Markdown本身的目录只能在上方显示，这里我选择使用一个插件来生成侧边目录。 安装插件使用了node.js，没有安装的话自己安装，安装插件下载过慢的话换淘宝源或者清华源 点击win+r，输入cmd点击回车打开。 输入 1npm install -g i5ting_toc 出现添加包成功代表安装成功 生成文件打开需要生成的md文件所在目录 在地址栏输入cmd点击回车。（这样操作省去了使用cd将目录移动到文件所在的文件夹的步骤） 输入 1i5ting_toc -f Tomcat的目录结构.md -o Tomcat的目录结构.md是我的文件名，需要根据自己的文件名去修改。 下面输出的三行分别为文件所在文件夹、目标文件和生成的文件。 推荐将Markdown中使用的图片都放在一个单独的文件夹，并将文件夹和Markdown放在一个文件夹中，将图片路径设置为相对路径，这样如果生成的HTML文件图片不显示只要将图片文件夹复制一份放到preview文件夹中就正常显示了。 可以看到生成的文件已经加了锚点，支持打开相应的链接直接跳转到相应的位置。","categories":[{"name":"开发工具","slug":"开发工具","permalink":"http://zzy521.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://zzy521.com/tags/markdown/"},{"name":"项目说明","slug":"项目说明","permalink":"http://zzy521.com/tags/%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E/"}]},{"title":"Tomcat服务器介绍","slug":"Tomcat服务器介绍","date":"2021-01-02T09:01:32.000Z","updated":"2021-01-02T09:10:00.694Z","comments":true,"path":"posts/c86b9588.html","link":"","permalink":"http://zzy521.com/posts/c86b9588.html","excerpt":"","text":"Tomcat的目录结构解压下载好的tomcat可以看到如下文件结构： bin：存放启动和关闭tomcat的命令的路径。 conf：存放tomcat的配置，所有的tomcat的配置都在该路径下设置。 lib：存放Tomcat服务器的核心类库（JAR文件），如果需要扩展tomcat的功能，也可将第三方类库复制到该路径下。 logs：这是一个空路径，用来保存Tomcat每次运行后产生的日志。 temp：保存Web应用运行过程中生成的临时文件。 webapps：该路径用于自动部署Web应用，将Web应用复制到该路径下，Tomcat启动时会自动将该应用部署到容器中。 work：保存在Web应用在运行过程中编译生成的.class文件。该文件夹可以删除，但每次启动Tomcat时系统都会再次建立该路径。 LICENSE等相关文档 运行Tomcat只需要系统有一个JAVA_HOME环境变量。不管是Windows还是linux，只要有这个环境变量并且指向JDK的安装路径即可。 启动Tomcat对于Windows平台，只要双击Tomcat安装路径下bin目录中的startup.bat文件即可。 启动Tomcat后，打开浏览器并在地址栏输入http://localhost:8080/，浏览器出现此界面即表示安装成功。 配置Tomcat的端口Tomcat的默认端口是8080，可以通过修改Tomcat的配置文件来改变服务端口，甚至可以让Tomcat同时在多个端口提供服务。 Tomcat的配置文件在conf目录下，控制端口的配置文件为conf下的server.xml文件。切记修改时只能用记事本或者vi等无格式的编辑器，不可以使用写字板。 在service.xml的70行左右的位置，可以看到以下代码 123&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; 其中port=&quot;8080&quot;就是Tomcat提供服务的端口，将Tomcat修改为任意的端口，为避免与公用端口产生冲突，端口号最好大于1024。在这里我修改为8090. 修改完之后重启Tomcat，在浏览器地址栏输入http://localhost:8090/,即可再次看到Tomcat的界面。 Tomcat的控制台在上图右上角有三个控制台：一个是Server Status控制台，一个是Manager APP控制台，一个是Host Mnager控制台。 Status用来监控服务器的状态，Manager控制台用来部署和监控Web应用，通常只需使用Manager控制台。 控制台的用户名和密码是通过Tomcat的JAAS（JAAS的全称是Java Authentication Authorization Service（Java验证和授权API），它用来控制对Java web应用的授权访问）控制的。初始是没有用户的，所以无论输入什么都无法登陆。 webapps路径是Web应用的存放路径，而Manager控制台对应的也是一个Web应用，所以它的配置文件是webapps/manager/WEB-INF路径下的web.xml文件。 用户的配置也在其中，但是Tomcat采用文件安全域，添加控制台用户只需要修改conf路径下的tomcat-users.xml文件即可。 打开该文件在 1&lt;tomcat-users&gt; 下方添加下列内容 12&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;user username=&quot;manager&quot; password=&quot;manager&quot; roles=&quot;manager-gui&quot;/&gt; 此处登录用户名和密码我都是用的manager，可以根据需要自行修改。 修改过后重启Tomcat点击控制台登录即可。 显示下图即表示登陆成功 Tomcat服务器状态","categories":[{"name":"服务器","slug":"服务器","permalink":"http://zzy521.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://zzy521.com/tags/Tomcat/"}]},{"title":"Linux查看应用的端口号和进程号PID","slug":"Linux查看应用的端口号和进程号PID","date":"2020-12-22T09:57:25.000Z","updated":"2020-12-23T01:25:15.839Z","comments":true,"path":"posts/73a46000.html","link":"","permalink":"http://zzy521.com/posts/73a46000.html","excerpt":"","text":"1.进程名和进程号PID的互查1.1根据进程名查进程号PID(PID是进程标识符)1ps -ef | grep 进程名 比如：查看tomcat进程的PID编号 1ps -ef | grep tomcat 如图，第一个就是查到的PID编号 还可以使用ps -aux | grep xxx，效果与ps -ef | grep xxx一样，只不过信息会更详细。1ps -aux | grep 进程名 PID编号可以用来强制结束某进程。 1kill -9 PID编号 比如：强制结束tomcat进程 12#5087为上边查到的tomcat的PIDkill -9 5087 1.2根据进程号查进程名将上边的进程名换成进程号即可。（这个用的比较少，一般都是根据进程名去查进程号） 1ps -ef | grep 进程号 1ps -aux | grep 进程号 2.端口号和进程号PID的互查根据进程PID查端口号1lsof -i | grep 进程号 或使用 1netstat -nap | grep 进程号 根据端口号查进程号PID1lsof -i:端口号 或 1netstat -nap | grep 端口号","categories":[{"name":"服务器","slug":"服务器","permalink":"http://zzy521.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://zzy521.com/tags/Linux/"}]},{"title":"Hexo新建博客显示分类及标签","slug":"Hexo新建博客显示分类及标签","date":"2020-12-20T12:40:11.000Z","updated":"2020-12-20T12:57:08.004Z","comments":true,"path":"posts/4d9beafe.html","link":"","permalink":"http://zzy521.com/posts/4d9beafe.html","excerpt":"","text":"分类进入hexo博客所在的根目录，输入如下命令： 1hexo new page categories 成功后提示： 1INFO Created: D:\\Hexo\\source\\categories\\index.md index.md的内容如下： 1234---title: categoriesdate: 2020-12-20 20:26:06--- 需要修改为 1234567---title: 分类date: 2020-12-20 20:26:06type: &quot;categories&quot;layout: categoriescomments: false--- 标签在控制台中输入如下命令： 1hexo new page tags 成功后提示： 1INFO Created: D:\\Hexo\\source\\tags\\index.md index.md的内容如下： 1234---title: tagsdate: 2020-12-20 20:51:11--- 修改为 1234567---title: 标签date: 2020-12-20 20:51:11type: &quot;tags&quot;layout: tagscomments: false--- 修改模板修改scaffolds中的post模板 123456789---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories: - 文章分类tags: - 文章标签toc: true---","categories":[{"name":"开发工具","slug":"开发工具","permalink":"http://zzy521.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://zzy521.com/tags/Hexo/"}]},{"title":"在服务器上安装运行EOS的Tomcat的方法","slug":"在服务器上安装运行EOS的Tomcat的方法","date":"2020-12-20T09:01:25.000Z","updated":"2021-02-20T01:15:14.981Z","comments":true,"path":"posts/eba5960e.html","link":"","permalink":"http://zzy521.com/posts/eba5960e.html","excerpt":"","text":"1.防火墙开启端口号12345678910111213# 查看firewall的状态firewall-cmd --state# 开启（如果防火墙未开启的话先开启）service firewalld start# 查询端口是否开放firewall-cmd --query-port=8080/tcpfirewall-cmd --query-port=8009/tcp# 开放8080端口firewall-cmd --permanent --add-port=8080/tcp# 开放8009端口firewall-cmd --permanent --add-port=8009/tcp#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload 2.将压缩包复制到服务器并打开在/usr/local文件夹下新建名为tomcat的文件夹，将名为apache-tomcat-7.0.54.tar的压缩包进去 进入tomcat文件夹下 1cd /usr/local/tomcat 解压 1tar -xvf apache-tomcat-7.0.54.tar 3.调大Tomcat的jvm内存在生产环境中，tomcat内存设置不好很容易出现JVM内存溢出，解决方法就是修改Tomcat中的catalina.sh文件 1234567#进入bin目录下cd /usr/local/tomcat/apache-tomcat-7.0.54/bin#打开catalina.sh文件vi catalina.sh#按i进入编辑模式，找到cygwin=false，在这一行的前面加入参数，具体如下，按Esc退出编辑模式，再输入:wq！点击回车保存JAVA_OPTS=&quot;-server -Xms800m -Xmx800m -XX:PermSize=256m -XX:MaxPermSize=512m -XX:MaxNewSize=512m&quot; 其他说明： “m”说明单位是MB，否则默认是KB 一般使用物理内存的80%作为堆大小 一般把-Xms和-Xmx设为一样大 一般把-Xmn设置为-Xmx值的1/4 一般将堆的总大小的50%到60%分配给新生成的池 jvm参数说明： -server 一定要作为第一个参数，启用JDK的server版本，在多个CPU时性能佳-Xms java Heap初始大小。 默认是物理内存的1/64。-Xmx java heap最大值。建议均设为物理内存的80%。不可超过物理内存。-Xmn java heap最小值，一般设置为Xmx的3、4分之一。-XX:PermSize 设定内存的永久保存区初始大小，缺省值为64M。-XX:MaxPermSize 设定内存的永久保存区最大大小，缺省值为64M。-XX:SurvivorRatio=2 生还者池的大小，默认是2。如-XX:NewSize 新生成的池的初始大小。 缺省值为2M。-XX:MaxNewSize 新生成的池的最大大小。 缺省值为32M。+XX:AggressiveHeap 让jvm忽略Xmx参数，疯狂地吃完一个G物理内存，再吃尽一个G的swap。-Xss 每个线程的Stack大小-verbose:gc 现实垃圾收集信息-Xloggc:gc.log 指定垃圾收集日志文件-XX:+UseParNewGC 缩短minor收集的时间-XX:+UseConcMarkSweepGC 缩短major收集的时间-XX:userParNewGC 可用来设置并行收集(多CPU)-XX:ParallelGCThreads 可用来增加并行度(多CPU)-XX:UseParallelGC 设置后可以使用并行清除收集器(多CPU) 4.改变端口号如果不用默认的8080端口则需要修改端口号，在conf文件夹下的server.xml文件中修改。换端口号的话需要在防火墙开启相应的端口号，参考第一步。（如果使用默认的8080端口则跳过此步骤） 12345678#进入conf目录下cd /usr/local/tomcat/apache-tomcat-7.0.54/conf#打开server.xml文件vi server.xml#按i进入编辑模式，找到 &lt;Connector URIEncoding=&quot;UTF-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;，#将其中的8080换为需要的端口号，例如8090，按Esc退出编辑模式，再输入:wq！点击回车保存&lt;Connector URIEncoding=&quot;UTF-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8090&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt; 5.启动运行1234#进入bin目录下cd /usr/local/tomcat/apache-tomcat-7.0.54/bin#启动运行./startup.sh 部署完项目需要重启tomcat 123456#进入bin目录下cd /usr/local/tomcat/apache-tomcat-7.0.54/bin#停止运行./shutdown.sh#启动运行./startup.sh","categories":[{"name":"服务器","slug":"服务器","permalink":"http://zzy521.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://zzy521.com/tags/Linux/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://zzy521.com/tags/Tomcat/"},{"name":"EOS","slug":"EOS","permalink":"http://zzy521.com/tags/EOS/"}]}],"categories":[{"name":"文章分类","slug":"文章分类","permalink":"http://zzy521.com/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"},{"name":"服务器","slug":"服务器","permalink":"http://zzy521.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"开发工具","slug":"开发工具","permalink":"http://zzy521.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"文章标签","slug":"文章标签","permalink":"http://zzy521.com/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"},{"name":"Linux","slug":"Linux","permalink":"http://zzy521.com/tags/Linux/"},{"name":"EOS","slug":"EOS","permalink":"http://zzy521.com/tags/EOS/"},{"name":"exe","slug":"exe","permalink":"http://zzy521.com/tags/exe/"},{"name":"Java","slug":"Java","permalink":"http://zzy521.com/tags/Java/"},{"name":"Rest接口","slug":"Rest接口","permalink":"http://zzy521.com/tags/Rest%E6%8E%A5%E5%8F%A3/"},{"name":"markdown","slug":"markdown","permalink":"http://zzy521.com/tags/markdown/"},{"name":"项目说明","slug":"项目说明","permalink":"http://zzy521.com/tags/%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://zzy521.com/tags/Tomcat/"},{"name":"Hexo","slug":"Hexo","permalink":"http://zzy521.com/tags/Hexo/"}]}